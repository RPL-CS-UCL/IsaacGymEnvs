# used to create the object
name: A1

physics_engine: ${..physics_engine}

env:
  numEnvs: ${resolve_default:4096,${...num_envs}} #4096

  numObservations: 48
  numActions: 12
  envSpacing: 3.  # [m]
  enableDebugVis: False

  #clipObservations: 100.0
  clipActions: 27.0

  terrain:
    terrainType: plane # none, plane, trimesh, paper
    staticFriction: 1.25  # [-]
    dynamicFriction: 0.9  # [-]
    restitution: 0.        # [-]
    # rough terrain only:
    curriculum: true
    maxInitMapLevel: 0
    mapLength: 20.
    mapWidth: 20.
    numLevels: 20
    numTerrains: 2
    #terrain types: [smooth slope, rough slope, stairs up, stairs down, discrete]
    #terrainProportions: [0.1, 0.1, 0.35, 0.25, 0.2]
    terrainProportions: [ 0.5,0.5 ]
    # tri mesh only:
    # tri mesh only:
    slopeTreshold: 0.5
    horizontal_scale: 0.1
    vertical_scale: 0.005
    border_size: 4
    num_per_env: 2
    max_height: 0.025 #m
    min_height: -0.075 #m
    step_size: 0.01 #m
    downsampled_scale: 0.2 #m


  plane:
    staticFriction: 1.25  # [-]
    dynamicFriction: 0.9  # [-]
    restitution: 0.        # [-]

  baseInitState:
    pos: [0.0, 0.0, 0.35] # x,y,z [m]
    rot: [0.0, 0.0, 0.0, 1.0] # x,y,z,w [quat]
    vLinear: [0.0, 0.0, 0.0]  # x,y,z [m/s]
    vAngular: [0.0, 0.0, 0.0]  # x,y,z [rad/s]

  randomCommandVelocityRanges:
    linear_x: [-1., 1.] # min max [m/s]
    linear_y: [-0.1, 0.1]   # min max [m/s]
    yaw: [-0.1, 0.1]          # min max [rad/s]

  control:
    # PD Drive parameters:
    #driveMode: 4 # see GymDofDriveModeFlags (0 is none, 1 is pos tgt, 2 is vel tgt, 4 effort)
    stiffness: 20.0  # [N*m/rad] 85.0
    damping: 0.5   # [N*m*s/rad] 2.0
    actionScale: 11.0
    # decimation: Number of control action updates @ sim DT per policy DT
    decimation: 4

  defaultJointAngles:  # = target angles when action = 0.0
    FR_hip_joint: -0.1    # [rad]
    FR_thigh_joint: 0.8   # [rad]
    FR_calf_joint: -1.5   # [rad]

    FL_hip_joint: 0.1     # [rad]
    FL_thigh_joint: 0.8   # [rad]
    FL_calf_joint: -1.5   # [rad]

    RR_hip_joint: -0.1    # [rad]
    RR_thigh_joint: 1.0   # [rad]
    RR_calf_joint: -1.5   # [rad]

    RL_hip_joint: 0.1     # [rad]
    RL_thigh_joint: 1.0   # [rad]
    RL_calf_joint: -1.5   # [rad]

  urdfAsset:
    collapseFixedJoints: False
    fixBaseLink: False

  learn:
    allowKneeContacts: true
    # rewards
    terminationReward: 0.0
    linearVelocityXYRewardScale: 1.1 #1.1
    linearVelocityZRewardScale: -4.0
    angularVelocityXYRewardScale: -0.05
    angularVelocityZRewardScale: 1.0
    orientationRewardScale: -2.4 
    torqueRewardScale: -0.00002 #-0.00002
    jointAccRewardScale: -0.0005 
    baseHeightRewardScale: -5.0 
    feetAirTimeRewardScale:  0.3
    kneeCollisionRewardScale: -0.25 
    actionRateRewardScale: -0.01
    footcontactRewardScale: -0.05
    gaitRewardScale: -0.7 #0.5
    gaitPeriodRewardScale: -0.05 #0.01
    footstepReward: -0.01

    # normalization
    linearVelocityScale: 2.0
    angularVelocityScale: 0.25
    projectedGravityScale: 1.0
    dofPositionScale: 1.0
    dofVelocityScale: 0.05
    userCommandScale: [2.0, 2.0, 0.25]

    # episode length in seconds
    episodeLength_s: 20

    #M: noise
    addNoise: true
    noiseLevel: 1.0 # scales other values
    dofPositionNoise: 0.0005
    dofVelocityNoise: 0.01
    linearVelocityNoise: 0.1
    angularVelocityNoise: 0.00008
    gravityNoise: 0.00001
    heightMeasurementNoise: 0.06

    #randomization
    randomizeFriction: true
    frictionRange: [ 0.5, 1.25 ]

    #M: Push Robot
    pushRobots: false
    pushInterval_s: 15

  # viewer cam:
  viewer:
    refEnv: 0
    pos: [0, 0, 4]  # [m]
    lookat: [1., 1, 3.3]  # [m]


  # set to True if you use camera sensors in the environment
  enableCameraSensors: False

sim:
  dt: 0.002 #0.02
  substeps: 1 #2
  up_axis: "z"
  use_gpu_pipeline: ${eq:${...pipeline},"gpu"}
  gravity: [0.0, 0.0, -9.81]
  physx:
    num_threads: ${....num_threads}
    solver_type: ${....solver_type}
    use_gpu: ${contains:"cuda",${....sim_device}} # set to False to run on CPU
    num_position_iterations: 4
    num_velocity_iterations: 2 #1
    contact_offset: 0.01 #0.02
    rest_offset: 0.0
    bounce_threshold_velocity: 0.5 #0.2
    max_depenetration_velocity: 1.0 #100.0
    default_buffer_size_multiplier: 5.0
    max_gpu_contact_pairs: 8388608 # 8*1024*1024
    num_subscenes: ${....num_subscenes}
    contact_collection: 2 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (default - all contacts)

task:
  randomize: true
  randomization_params:
    frequency: 500   # Define how many environment steps between generating new randomizations
#    observations:
#      range: [0, .002] # range for the white noise
#      operation: "additive"
#      distribution: "gaussian"
#    actions:
#      range: [0., .02]
#      operation: "additive"
#      distribution: "gaussian"
#    sim_params:
#      gravity:
#        range: [0, 0.4]
#        operation: "additive"
#        distribution: "gaussian"
#        schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
#        schedule_steps: 3000
    actor_params:
      A1:
        color: True
#        rigid_body_properties:
#          mass:
#            range: [0.5, 1.5]
#            operation: "scaling"
#            distribution: "uniform"
#            setup_only: True # Property will only be randomized once before simulation is started. See Domain Randomization Documentation for more info.
#            schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
#            schedule_steps: 3000
#        rigid_shape_properties:
#          friction:
#            num_buckets: 500
#            range: [0.7, 1.3]
#            operation: "scaling"
#            distribution: "uniform"
#            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
#            schedule_steps: 3000
#          restitution:
#            range: [0., 0.7]
#            operation: "scaling"
#            distribution: "uniform"
#            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
#            schedule_steps: 3000
#        dof_properties:
#          damping:
#            range: [0.5, 1.5]
#            operation: "scaling"
#            distribution: "uniform"
#            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
#            schedule_steps: 3000
#          stiffness:
#            range: [0.5, 1.5]
#            operation: "scaling"
#            distribution: "uniform"
#            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
#            schedule_steps: 3000
#          lower:
#            range: [0, 0.01]
#            operation: "additive"
#            distribution: "gaussian"
#            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
#            schedule_steps: 3000
#          upper:
#            range: [0, 0.01]
#            operation: "additive"
#            distribution: "gaussian"
#            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
#            schedule_steps: 3000
